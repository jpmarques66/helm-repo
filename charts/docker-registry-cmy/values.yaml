# Important fields
# ingress.hosts and ingress.tls.hosts -> your domain name
# persistence
# secrets

docker-registry:
  # Default values for docker-registry.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.
  replicaCount: 1

  updateStrategy:
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 1
    #   maxUnavailable: 0

  podAnnotations: {}
  podLabels: {}

  image:
    repository: eu.gcr.io/ccp-prod-239910/docker.io/registry
    tag: 2.7.1
    pullPolicy: IfNotPresent
  # imagePullSecrets:
      # - name: docker
  service:
    name: registry
    type: ClusterIP
    # clusterIP:
    port: 5000
    # nodePort:
    # loadBalancerIP:
    # loadBalancerSourceRanges:
    annotations: {}
    # foo.io/bar: "true"
  ingress:
    enabled: true
    path: /
    # Used to create an Ingress record.
    hosts: []
      #- something.cloud.ext.systems
    annotations:
      # kubernetes.io/ingress.class: <ingress_controller>
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
    labels: {}
    tls:
      # Secrets must be manually created in the namespace.
      # - secretName: chart-example-tls
      - hosts: []
        #- something.cloud.ext.systems
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  persistence:
    accessMode: 'ReadWriteOnce'
    enabled: true
    size: 20Gi
    deleteEnabled: True
    storageClass: ""

  # set the type of filesystem to use: filesystem, s3
  storage: filesystem

  # set the type of authentication to use: htpasswd (only one supported for the moment)
  authentication: htpasswd

  # HTPasswd configuration
  htpasswd:
    # An existing secret that will override the rest of the configuration
    existingSecret: ""

    # Username to access docker registry
    username: ""
    # Password to access docker registry
    password: ""

  # Set this to name of secret for tls certs
  # tlsSecretName: registry.docker.example.com
  secrets:
    existingSecret: ""

    haSharedSecret: ""
      # Access credentials

  # Secrets for Azure
  #   azure:
  #     accountName: ""
  #     accountKey: ""
  #     container: ""
  # Secrets for S3 access and secret keys
  #   s3:
  #     accessKey: ""
  #     secretKey: ""
  # Secrets for Swift username and password
  #   swift:
  #     username: ""
  #     password: ""

  # Options for s3 storage type:
  # s3:
  #  region: us-east-1
  #  regionEndpoint: s3.us-east-1.amazonaws.com
  #  bucket: my-bucket
  #  encrypt: false
  #  secure: true

  # Options for swift storage type:
  # swift:
  #  authurl: http://swift.example.com/
  #  container: my-container

  configData:
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3

  securityContext:
    enabled: true
    runAsUser: 1000
    fsGroup: 1000

  priorityClassName: ""

  podDisruptionBudget: {}
    # maxUnavailable: 1
    # minAvailable: 2

  nodeSelector: {}

  affinity: {}

  tolerations: []

  extraVolumeMounts: []
  ## Additional volumeMounts to the registry container.
  #  - mountPath: /secret-data
  #    name: cloudfront-pem-secret
  #    readOnly: true

  extraVolumes: []
  ## Additional volumes to the pod.
  #  - name: cloudfront-pem-secret
  #    secret:
  #      secretName: cloudfront-credentials
  #      items:
  #        - key: cloudfront.pem
  #          path: cloudfront.pem
  #          mode: 511
